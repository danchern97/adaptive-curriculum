#!/bin/bash

#SBATCH --partition=gpu_mig
#SBATCH --gpus=1
#SBATCH --job-name=restore_db
#SBATCH --ntasks=1
#SBATCH --cpus-per-task=4
#SBATCH --time=00:20:00
#SBATCH --output=slurm_outputs/slurm_restore_%A.out

# Restore tokenSeqDB collections into a persistent MongoDB at .mongo/db.
# This starts a local mongod, runs mongorestore on provided archives, then shuts down.

# --- modules / conda ---
module purge
module load 2024
module load Anaconda3/2024.06-1
source activate searchformer

# --- paths ---
REPO_DIR="${SLURM_SUBMIT_DIR:-$PWD}"
cd "$REPO_DIR"

MONGOD="$REPO_DIR/vendor/mongodb-linux-x86_64-rhel80-6.0.14/bin/mongod"
TOOLS_DIR="$REPO_DIR/vendor/mongodb-database-tools/bin"
export PATH="$TOOLS_DIR:$PATH"

# Archives to restore (override via environment if needed)
ARCHIVE_VOCAB="${ARCHIVE_VOCAB:-$REPO_DIR/sokoban.vocabulary.gz}"
ARCHIVE_MAIN="${ARCHIVE_MAIN:-$REPO_DIR/sokoban.gz}"

# Persistent DB path (shared storage)
DBROOT="$REPO_DIR/.mongo"
DBPATH="$DBROOT/db"
mkdir -p "$DBPATH"

# Concurrency lock (avoid multiple mongod on same files)
LOCKDIR="$DBROOT/lock"
if ! mkdir "$LOCKDIR" 2>/dev/null; then
    echo "Another job is using $DBROOT. Only one mongod per DB path is allowed."
    exit 1
fi
trap 'rmdir "$LOCKDIR" 2>/dev/null || true' EXIT

# Port for this job
PORT=$(( 21000 + (SLURM_JOB_ID % 10000) ))

"$MONGOD" \
    --dbpath "$DBPATH" \
    --bind_ip 127.0.0.1 \
    --port "$PORT" \
    --wiredTigerCacheSizeGB 1 \
    --nojournal \
    --fork \
    --logpath "$DBROOT/mongod.log"

export MONGODB_URI="mongodb://127.0.0.1:${PORT}"

# Optional: set DROP=1 to replace existing collections when restoring
DROP="${DROP:-0}"
DROP_FLAG=()
if [ "$DROP" = "1" ]; then
    DROP_FLAG=(--drop)
fi

set -e

if [ -f "$ARCHIVE_VOCAB" ]; then
    echo "Restoring vocabulary archive: $ARCHIVE_VOCAB"
    mongorestore \
        --uri "$MONGODB_URI" \
        --gzip \
        --archive="$ARCHIVE_VOCAB" \
        --nsInclude "tokenSeqDB.*" \
        "${DROP_FLAG[@]}"
else
    echo "Vocabulary archive not found: $ARCHIVE_VOCAB (skipping)"
fi

if [ -f "$ARCHIVE_MAIN" ]; then
    echo "Restoring main archive: $ARCHIVE_MAIN"
    mongorestore \
        --uri "$MONGODB_URI" \
        --gzip \
        --archive="$ARCHIVE_MAIN" \
        --nsInclude "tokenSeqDB.*" \
        "${DROP_FLAG[@]}"
else
    echo "Main archive not found: $ARCHIVE_MAIN (skipping)"
fi

# Clean shutdown
python - <<'PY'
import os
from pymongo import MongoClient
try:
        MongoClient(os.environ["MONGODB_URI"]).admin.command('shutdown')
except Exception:
        pass
PY
pkill -f "mongod.*--port ${PORT}" || true
